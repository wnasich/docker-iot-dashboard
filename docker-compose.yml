##############################################################################
#
# Name: docker-compose.yml
#
# Function:
# 	Configure the docker-iot-dashboard collection of docker containers.
#
# Copyright:
#	This file copyright (c) 2017-2020 by
#
#		MCCI Corporation
#		3520 Krums Corners Road
#		Ithaca, NY 14850
#
#	Distributed under the terms of the license file shipped with this
#	collection.
#
# Authors:
#	  Terry Moore, MCCI Corporation
#   Murugan Chandrasekar, MCCI Corporation
#	  Based on work by Johan Stocking, The Things Network
#
##############################################################################

#
# Note: if you are running this manually, you must set a number of variables,
# not least IOT_DASHBOARD_DATA, which must be the path to the top data directory
# for these apps. If you use dashboard-ctl, this will be done for you.
#
# To get a list of all variables used in this file, use the following command:
# sed -n -e 's/#.*$//'  -e 's/[^$]*${\([^-:}]*\)[-:}][^$]*/\1/p' docker-compose.yml | LC_ALL=C sort -u
#
# To get a list of undocumented variables, use the following command,
# then look in the left hand column:
#
# comm <(sed -n -e 's/#.*$//' -e 's/[^$]*${\([^-:}]*\)[-:}][^$]*/\1/p' docker-compose.yml | LC_ALL=C sort -u)  <(sed -n -e '/^# IOT_[A-Z_0-9]*$/s/^# //p' docker-compose.yml | LC_ALL=C sort -u )
#
#+++
# IOT_DASHBOARD_NGINX_FQDN
#	The fully-qualified domain name to be served by NGINX.
#
# IOT_DASHBOARD_AWS_ACCESS_KEY_ID
#       The access key for AWS for backups.
#
# IOT_DASHBOARD_AWS_DEFAULT_REGION
#       The AWS default region.
#
# IOT_DASHBOARD_AWS_S3_BUCKET_INFLUXDB
#       The S3 bucket to be used for uploading the influxdb backup data.
#
# IOT_DASHBOARD_AWS_SECRET_ACCESS_KEY
#       The AWS API secret key for backing up influxdb data.
#
# IOT_DASHBOARD_AWS_HOST_BASE
#		The S3 endpoint is used to configure 3rd party clients. 
#		For Amazon:  s3.amazonaws.com , For DigitalOcean: nyc3.digitaloceanspaces.com
#
# IOT_DASHBOARD_AWS_HOST_BUCKET_INFLUXDB
#		The S3 endpoint to access Influxdb bucket.
#		For Amazon: '%($IOT_DASHBOARD_AWS_S3_BUCKET_INFLUXDB)s.s3.amazonaws.com'
#		For DigitalOcean: '%($IOT_DASHBOARD_AWS_S3_BUCKET_INFLUXDB).nyc3.digitaloceanspaces.com'
#
# IOT_DASHBOARD_CERTBOT_EMAIL
#	The email address to be used for registering with Let's Encrypt.
#
# IOT_DASHBOARD_CERTBOT_FQDN
#	The domain(s) to be used by certbot when registering with Let's Encrypt.
#
# IOT_DASHBOARD_DATA
#	The path to the data directory. This must end with a '/', and must either
#	be absolute or must begin with './'. (If not, you'll get parse errors.)
#
# IOT_DASHBOARD_GRAFANA_ADMIN_PASSWORD
#	The password to be used for the admin user on first login. This is ignored
#	after the Grafana database has been built.
#
# IOT_DASHBOARD_GRAFANA_PROJECT_NAME
#	The project name to be used for the emails from the administrator.
#
# IOT_DASHBOARD_GRAFANA_LOG_MODE
#	Set the grafana log mode.
#
# IOT_DASHBOARD_GRAFANA_LOG_LEVEL
#	Set the grafana log level (e.g. debug)
#
# IOT_DASHBOARD_GRAFANA_SMTP_ENABLED
#	Set to false to disable SMTP.
# Defaults to true
#
# IOT_DASHBOARD_GRAFANA_SMTP_SKIP_VERIFY
#	Set to false to enable SSL verification.
#	Defaults to true.
#
# IOT_DASHBOARD_GRAFANA_INSTALL_PLUGINS
#	A list of grafana plugins to install. Use (comma and space) ", " to delimit plugins.
#
# IOT_DASHBOARD_GRAFANA_SMTP_FROM_ADDRESS
#       The "from" address for Grafana emails.
#
# IOT_DASHBOARD_GRAFANA_USERS_ALLOW_SIGN_UP
#	Set to true to allow users to sign up.
#
# IOT_DASHBOARD_INFLUXDB_ADMIN_PASSWORD
#	The password to be used for the admin user by influxdb. Again, this is
#	ignored after the influxdb database has been built.
#
# IOT_DASHBOARD_INFLUXDB_INITIAL_DATABASE_NAME
#	The inital database to be created on first launch of influxdb. Ignored
#	after influxdb has been launched.
#
# IOT_DASHBOARD_MAIL_DOMAIN
#       the postfix mail domain.
#
# IOT_DASHBOARD_MAIL_HOST_NAME
#       the external FQDN for the mail host.
#
# IOT_DASHBOARD_MAIL_RELAY_IP
#       the mail relay machine, assuming that the real mailer is upstream from us.
#
# IOT_DASHBOARD_MAIL_SMTP_LOGIN
#       the mail relay login: name@example.com -- it will come from your upstream
#       provider.
#
# IOT_DASHBOARD_MAIL_SMTP_PASSWORD
#       the mail relay password
#
# IOT_DASHBOARD_PORT_HTTP
#	The port to listen to for HTTP. Primarily for test purposes. Defaults to
#	80.
#
# IOT_DASHBOARD_PORT_HTTPS
#	The port to listen to for HTTPS. Primarily for test purposes. Defaults to
#	443.
#
# IOT_DASHBOARD_TIMEZONE
#	The timezone to use. Defaults to GMT.
#
# IOT_DASHBOARD_NODE_RED_VERSION
#       To Install specific version of node-red version. Defaults to latest.
#
# IOT_DASHBOARD_NODE_RED_INSTALL_MODULES
#       Install the required node-red modules. use "space" to delimit the modules.
#
# IOT_DASHBOARD_PORT_MQTT_TCP
#       Accessing mqtt channel over TCP. Defaults to 1883.
#
# IOT_DASHBOARD_PORT_MQTT_SSL
#       Accessing mqtt channel over TLS/SSL. Defaults to 8883.
#
# IOT_DASHBOARD_PORT_MQTT_WSS
#        Accessing mqtt channel over WSS. Defaults to 8083.
#
# IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME
#       the external FQDN for the influxdb host
#
# IOT_DASHBOARD_INFLUXDB_BACKUP_EMAIL
#       Backup mail will be sent to the mentioned MAIL IDs. Use "space" to delimit the MAIL IDs.
#
#---

# Also see nginx/setup.sh, which uses some additional test variables when
# debugging.
#

version: '3.8'
services:
  # the nginx server connects us to the outside world
  nginx:
    environment:
      CERTBOT_DOMAINS: "${IOT_DASHBOARD_CERTBOT_FQDN:-.}"
      CERTBOT_EMAIL: "${IOT_DASHBOARD_CERTBOT_EMAIL:-.}"
      NGINX_FQDN: "${IOT_DASHBOARD_NGINX_FQDN:-.}"
    restart: unless-stopped
    build: nginx
    ports:
      - "${IOT_DASHBOARD_PORT_HTTP:-80}:80"
      - "${IOT_DASHBOARD_PORT_HTTPS:-443}:443"
    volumes:
      - "${IOT_DASHBOARD_DATA}docker-nginx/htdocs:/usr/local/nginx/htdocs"
      - "${IOT_DASHBOARD_DATA}docker-nginx/letsencrypt:/etc/letsencrypt"
      - "${IOT_DASHBOARD_DATA}docker-nginx/authdata/influxdb:/etc/nginx/authdata/influxdb"
      - "${IOT_DASHBOARD_DATA}docker-nginx/authdata/nodered:/etc/nginx/authdata/nodered"

    # nginx proxies for all of the below, so it needs to have links to them.
    # Examine nginx/proxy-*.conf to see how the links are set up. Also bear
    # in mind that the individual servers (e.g. grafana) may need to be
    # informed about the nature of the redirections.
    #
    links:
      - grafana
      - node-red
      - influxdb
      - mqtts
      - pgadmin

  node-red:
    restart: unless-stopped
    build:
      context: ./node-red
      dockerfile: Dockerfile
      args:
        node_red_version: "${IOT_DASHBOARD_NODE_RED_VERSION:-latest}"
        node_red_contrib_ttn_version: "${IOT_DASHBOARD_NODE_RED_CONTRIB_TTN_VERSION:-latest}"
        node_red_install_modules: "${IOT_DASHBOARD_NODE_RED_INSTALL_MODULES:-}"
    user: "root"
    volumes:
      - "${IOT_DASHBOARD_DATA}node-red:/data"
    environment:
      TZ: "${IOT_DASHBOARD_TIMEZONE:-GMT}"
    # nodered opens ports on influxdb, timescaledb and postfix so it needs to be able to talk to it.
    links:
      - influxdb
      - timescaledb
      - postfix

  mqtts:
    restart: unless-stopped
    build:
      context: ./mqtts
      dockerfile: Dockerfile
      args:
        ssl_cert: "${IOT_DASHBOARD_NGINX_FQDN:-.}"
    ports:
#      - "${IOT_DASHBOARD_PORT_MQTT_TCP:-1883}:1883"   #-----> Connection on this TCP port is insecure. can be added if needed
      - "${IOT_DASHBOARD_PORT_MQTT_SSL:-8883}:8883"
      - "${IOT_DASHBOARD_PORT_MQTT_WSS:-8083}:8083"
    volumes:
      - "${IOT_DASHBOARD_DATA}docker-nginx/letsencrypt:/etc/letsencrypt"
      - "${IOT_DASHBOARD_DATA}mqtt/credentials:/etc/mosquitto/credentials"
    hostname: "${IOT_DASHBOARD_MQTT_HOST_NAME:-mqtts}"

  influxdb:
    restart: unless-stopped
    build:
      context: ./influxdb
      dockerfile: Dockerfile
      args:
        distrib_id: "${IOT_DASHBOARD_OS_DISTRIB_ID:-ubuntu}"
        distrib_codename: "${IOT_DASHBOARD_OS_DISTRIB_CODENAME:-bionic}"
        hostname: "${IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME:-.}"
        relay_ip: "postfix:25"
        domain: "${IOT_DASHBOARD_MAIL_DOMAIN:-.}"
      # Backing up influxdb metadata and database to S3 Bucket
        AWS_ACCESS_KEY_ID: "${IOT_DASHBOARD_AWS_ACCESS_KEY_ID:-.}"
        AWS_SECRET_ACCESS_KEY: "${IOT_DASHBOARD_AWS_SECRET_ACCESS_KEY:-.}"
        AWS_DEFAULT_REGION: "${IOT_DASHBOARD_AWS_DEFAULT_REGION:-.}"
        AWS_HOST_BASE: "${IOT_DASHBOARD_AWS_HOST_BASE:-.}"
        AWS_HOST_BUCKET_INFLUXDB: "${IOT_DASHBOARD_AWS_HOST_BUCKET_INFLUXDB:-.}"
    hostname: "${IOT_DASHBOARD_INFLUXDB_MAIL_HOST_NAME:-.}"
    expose:
      - "8086"
    volumes:
      - "${IOT_DASHBOARD_DATA}influxdb:/var/lib/influxdb"
     # Dircectory for influxdb metadata and database backup inside "./data"
      - "${IOT_DASHBOARD_DATA}influx-backup:/var/lib/influxdb-backup"
      - "${IOT_DASHBOARD_DATA}influxdb-S3-bucket:/var/lib/influxdb-S3-bucket"
    environment:
      INFLUXDB_INIT_PWD: "${IOT_DASHBOARD_INFLUXDB_ADMIN_PASSWORD:-!notset}"
      PRE_CREATE_DB: "${IOT_DASHBOARD_INFLUXDB_INITIAL_DATABASE_NAME:-demo}"
      INFLUXDB_BIND_ADDRESS: "influxdb:8088"
      INFLUXDB_BACKUP_MAIL: "${IOT_DASHBOARD_INFLUXDB_BACKUP_EMAIL:-}"
      SOURCE_NAME: "${IOT_DASHBOARD_CERTBOT_FQDN}"
      S3_BUCKET_INFLUXDB: "${IOT_DASHBOARD_AWS_S3_BUCKET_INFLUXDB:-.}"

  timescaledb:
    restart: unless-stopped
    image: timescale/timescaledb:${IOT_DASHBOARD_TIMESCALEDB_VERSION:-latest-pg12}
    environment:
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: "${IOT_DASHBOARD_TIMESCALEDB_ADMIN_PASSWORD:-!notset}"
      POSTGRES_DB: "${IOT_DASHBOARD_TIMESCALEDB_INITIAL_DATABASE_NAME:-demo}"
    volumes:
      - "${IOT_DASHBOARD_DATA}timescaledb:/var/lib/postgresql/data"

  pgadmin:
    restart: unless-stopped
    image: biarms/pgadmin4:${IOT_DASHBOARD_TIMESCALEDB_VERSION:-latest}
    links:
      - timescaledb
      - postfix
    environment:
      PGADMIN_DEFAULT_EMAIL: "${IOT_DASHBOARD_PGADMIN_EMAIL:-!notset}"
      PGADMIN_DEFAULT_PASSWORD: "${IOT_DASHBOARD_PGADMIN_PASSWORD:-!notset}"
      PGADMIN_DISABLE_POSTFIX: "false"
      PGADMIN_CONFIG_MAIL_SERVER: "postfix"
      PGADMIN_CONFIG_SECURITY_EMAIL_SENDER: "${IOT_DASHBOARD_PGADMIN_SMTP_FROM_ADDRESS:-pgadmin@localhost}"
    volumes:
      - "${IOT_DASHBOARD_DATA}pgadmin:/var/lib/pgadmin"

  grafana:
    restart: unless-stopped
    image: grafana/grafana:${IOT_DASHBOARD_GRAFANA_VERSION:-latest}
    user: "root"
    volumes:
      - "${IOT_DASHBOARD_DATA}grafana:/var/lib/grafana"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${IOT_DASHBOARD_GRAFANA_ADMIN_PASSWORD:-!notset}"
      GF_SERVER_DOMAIN: "${IOT_DASHBOARD_NGINX_FQDN}"
      GF_SERVER_ROOT_URL: "https://%(domain)s/grafana/"
      GF_SMTP_ENABLED: "${IOT_DASHBOARD_GRAFANA_SMTP_ENABLED:-true}"
      GF_SMTP_SKIP_VERIFY: "${IOT_DASHBOARD_GRAFANA_SMTP_SKIP_VERIFY:-true}"
      GF_SMTP_HOST: "postfix:25"
      GF_SMTP_FROM_ADDRESS: "${IOT_DASHBOARD_GRAFANA_SMTP_FROM_ADDRESS:-grafana@localhost}"
      GF_SMTP_FROM_NAME: "${IOT_DASHBOARD_GRAFANA_PROJECT_NAME:-Default} grafana admin"
      GF_LOG_MODE: "${IOT_DASHBOARD_GRAFANA_LOG_MODE:-console,file}"
      GF_LOG_LEVEL: "${IOT_DASHBOARD_GRAFANA_LOG_LEVEL:-info}"
      GF_INSTALL_PLUGINS: "${IOT_DASHBOARD_GRAFANA_INSTALL_PLUGINS:-grafana-worldmap-panel}"
      GF_USERS_ALLOW_SIGN_UP: "${IOT_DASHBOARD_GRAFANA_USERS_ALLOW_SIGN_UP:-false}"
    # grafana opens ports on influxdb, timescaledb and postfix, so it needs to be able to talk to it.
    links:
      - influxdb
      - timescaledb
      - postfix

  postfix:
    restart: unless-stopped
    build:
      context: ./postfix
      dockerfile: Dockerfile
      args:
        hostname: "${IOT_DASHBOARD_MAIL_HOST_NAME:-}"
        relay_ip: "${IOT_DASHBOARD_MAIL_RELAY_IP:-}"
        domain: "${IOT_DASHBOARD_MAIL_DOMAIN:-}"
        smtp_login: "${IOT_DASHBOARD_MAIL_SMTP_LOGIN:-}"
        smtp_password: "${IOT_DASHBOARD_MAIL_SMTP_PASSWORD:-}"
    expose:
      - "25"
    hostname: "${IOT_DASHBOARD_MAIL_HOST_NAME:-}"

### end of file ###
